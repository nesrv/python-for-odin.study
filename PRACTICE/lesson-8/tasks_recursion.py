# 5 задач на рекурсию с комментариями

# Задача 1: Факториал числа
def factorial(n):
    """Вычисляет факториал числа n"""
    if n <= 1:  # Базовый случай: 0! = 1! = 1
        return 1
    return n * factorial(n - 1)  # Рекурсивный вызов

print(f"5! = {factorial(5)}")  # 120

# Задача 2: Числа Фибоначчи
def fibonacci(n):
    """Возвращает n-е число Фибоначчи"""
    if n <= 2:  # Базовые случаи: F(1) = F(2) = 1
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)  # Сумма двух предыдущих

print(f"F(7) = {fibonacci(7)}")  # 13

# Задача 3: Степень числа
def power(base, exp):
    """Вычисляет base в степени exp"""
    if exp == 0:  # Базовый случай: любое число в степени 0 = 1
        return 1
    if exp == 1:  # Базовый случай: число в степени 1 = само число
        return base
    return base * power(base, exp - 1)  # Умножаем на base и уменьшаем степень

print(f"2^5 = {power(2, 5)}")  # 32

# Задача 4: Сумма цифр числа
def sum_digits(n):
    """Находит сумму всех цифр числа n"""
    if n < 10:  # Базовый случай: однозначное число
        return n
    return n % 10 + sum_digits(n // 10)  # Последняя цифра + сумма остальных

print(f"Сумма цифр 12345 = {sum_digits(12345)}")  # 15

# Задача 5: Обращение строки
def reverse_string(s):
    """Переворачивает строку рекурсивно"""
    if len(s) <= 1:  # Базовый случай: пустая строка или один символ
        return s
    return s[-1] + reverse_string(s[:-1])  # Последний символ + обращенная часть

print(f"Обращение 'hello' = '{reverse_string('hello')}'")  # 'olleh'

# Бонус: Исходная задача с комментариями
def count_paths(x, y):
    """Подсчитывает количество путей от x до y с шагами +1 и +3"""
    if x == y:  # Достигли цели
        return 1
    if x > y:   # Превысили цель - путь невозможен
        return 0
    # Суммируем пути через оба возможных шага
    return count_paths(x + 1, y) + count_paths(x + 3, y)

# Количество путей от 1 до 17, проходящих через 9
result = count_paths(1, 9) * count_paths(9, 17)
print(f"Количество программ через точку 9: {result}")